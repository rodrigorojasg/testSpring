--- HISTORIA DE USUARIO ---
id: HDU-EMP-003
titulo: Prevenir eliminación de empleadas
actor: Administrador del sistema
descripcion: >
  Como administrador del sistema,
  quiero que no se permita eliminar empleados de género femenino,
  para cumplir con la  normativa interna de no eliminar registros históricos sensibles.

criterios_aceptacion:
  - Si se intenta eliminar un empleado con género "Femenino", se debe lanzar una excepción o retornar un error controlado.
  - Si el empleado es de género "Masculino" u otro valor, se permite la eliminación normal.
  - El método de eliminación actual debe ser modificado para incluir esta validación.
  - No debe eliminarse ninguna lógica existente que ya esté implementada en ese método.
  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.
  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.


--- DIAGNÓSTICO Y PLAN DE CLASES ---
--- ANÁLISIS DE CLASES EXISTENTES ---

| Clase Java | Clasificación | Motivo |
|------------|----------------|--------|
| Employee | REUTILIZABLE-AS-IS | Contiene atributo `gender` que se necesita para la validación |
| EmployeeRepository | REUTILIZABLE-AS-IS | Proporciona el método `deleteById` que se necesita para eliminar un empleado |
| EmployeeService | MODIFICABLE | Necesita un nuevo método para validar el género antes de eliminar |
| EmployeeServiceImpl | MODIFICABLE | Implementación del servicio donde se realizará la validación |
| EmployeeController | MODIFICABLE | El método `delete` necesita manejar la nueva excepción |

--- PLAN DE MODIFICACIÓN ---

1. Clase `EmployeeService`: Agregar un nuevo método `validateAndDeleteEmployeeById(Long id)`. Este método primero buscará el empleado por id, verificará el género y si es válido, eliminará el empleado.

2. Clase `EmployeeServiceImpl`: Implementar el nuevo método `validateAndDeleteEmployeeById(Long id)`. Este método primero buscará el empleado por id, verificará el género y si es válido, eliminará el empleado. Si el género es "Femenino", lanzará una excepción.

3. Clase `EmployeeController`: Modificar el método `delete` para llamar al nuevo método `validateAndDeleteEmployeeById(Long id)` en lugar de `deleteEmployeeById(Long id)`. También se debe manejar la nueva excepción lanzada por `validateAndDeleteEmployeeById(Long id)`.

4. Crear una nueva clase de excepción `GenderValidationException` que se lanzará cuando se intente eliminar un empleado de género femenino.

5. Crear pruebas unitarias para el nuevo método `validateAndDeleteEmployeeById(Long id)` y la nueva excepción `GenderValidationException`.

--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---
- Modifica únicamente las clases marcadas como MODIFICABLE.
- Crea nuevas clases solo si están indicadas como NUEVA.
- No cambies de paquete ni nombre de clase.
- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.
- No omitas lógica existente.
- Cada clase debe comenzar con `package ...`.
- Devuelve únicamente clases y tests JUnit 5 válidos.
- No incluyas explicaciones ni comentarios adicionales.

