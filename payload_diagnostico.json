{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un analizador experto de código Java. Devuelve solo el análisis de clases existentes y el plan de modificación. No devuelvas código aún."
    },
    {
      "role": "user",
      "content": "\n\n--- HISTORIA DE USUARIO ---\nid: HDU-EMP-003\ntitulo: Prevenir eliminación de empleadas\nactor: Administrador del sistema\ndescripcion: >\n  Como administrador del sistema,\n  quiero que no se permita eliminar empleados de género femenino,\n  para cumplir con la normativa interna de no eliminar registros históricos sensibles.\n\ncriterios_aceptacion:\n  - Si se intenta eliminar un empleado con género \"Femenino\", se debe lanzar una excepción o retornar un error controlado.\n  - Si el empleado es de género \"Masculino\" u otro valor, se permite la eliminación normal.\n  - El método de eliminación actual debe ser modificado para incluir esta validación.\n  - No debe eliminarse ninguna lógica existente que ya esté implementada en ese método.\n  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.\n  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.\n\n\n--- CÓDIGO EXISTENTE DEL PROYECTO ---\n\n\n// Archivo: src/main/java/test/core/api/model/Employee.java\n\npackage test.core.api.model;\n\nimport java.io.Serializable;\nimport java.time.LocalDate;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name = \"employee\")\npublic class Employee implements Serializable {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1L;\n\n\t@Id\n\t@GeneratedValue(strategy = GenerationType.IDENTITY)\n\tprivate Long id;\n\n\tprivate String firstName;\n\tprivate String middleName;\n\tprivate String lastName;\n\tprivate String secondLastName;\n\tprivate Integer age;\n\tprivate String gender;\n\tprivate LocalDate birthDate;\n\tprivate String position;\n\tpublic Long getId() {\n\t\treturn id;\n\t}\n\tpublic void setId(Long id) {\n\t\tthis.id = id;\n\t}\n\tpublic String getFirstName() {\n\t\treturn firstName;\n\t}\n\tpublic void setFirstName(String firstName) {\n\t\tthis.firstName = firstName;\n\t}\n\tpublic String getMiddleName() {\n\t\treturn middleName;\n\t}\n\tpublic void setMiddleName(String middleName) {\n\t\tthis.middleName = middleName;\n\t}\n\tpublic String getLastName() {\n\t\treturn lastName;\n\t}\n\tpublic void setLastName(String lastName) {\n\t\tthis.lastName = lastName;\n\t}\n\tpublic String getSecondLastName() {\n\t\treturn secondLastName;\n\t}\n\tpublic void setSecondLastName(String secondLastName) {\n\t\tthis.secondLastName = secondLastName;\n\t}\n\tpublic Integer getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(Integer age) {\n\t\tthis.age = age;\n\t}\n\tpublic String getGender() {\n\t\treturn gender;\n\t}\n\tpublic void setGender(String gender) {\n\t\tthis.gender = gender;\n\t}\n\tpublic LocalDate getBirthDate() {\n\t\treturn birthDate;\n\t}\n\tpublic void setBirthDate(LocalDate birthDate) {\n\t\tthis.birthDate = birthDate;\n\t}\n\tpublic String getPosition() {\n\t\treturn position;\n\t}\n\tpublic void setPosition(String position) {\n\t\tthis.position = position;\n\t}\n\t\n\t\n\t\n\n}\n\n\n// Archivo: src/main/java/test/core/api/repository/EmployeeRepository.java\n\npackage test.core.api.repository;\n\nimport org.springframework.data.repository.PagingAndSortingRepository;\n\nimport test.core.api.model.Employee;\n\npublic interface EmployeeRepository extends PagingAndSortingRepository<Employee, Long> {\n\n\n}\n\n\n\n\n// Archivo: src/main/java/test/core/api/EmployeeCoreApiApplication.java\n\npackage test.core.api;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.scheduling.annotation.EnableAsync;\n@SpringBootApplication\n@EnableAsync\npublic class EmployeeCoreApiApplication {\n\t\n\t@Autowired\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(EmployeeCoreApiApplication.class, args);\n\t}\n\t\n\t\n}\n\n\n// Archivo: src/main/java/test/core/api/controller/EmployeeController.java\n\npackage test.core.api.controller;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport test.core.api.model.Employee;\nimport test.core.api.service.EmployeeService;\n\n@RestController\n@RequestMapping(\"/api/employees\")\npublic class EmployeeController {\n\n    @Autowired\n    private EmployeeService service;\n\n    @GetMapping\n    public List<Employee> getAll() {\n        System.out.println(\"Fetching all employees\");\n        return service.getAllEmployees();\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> delete(@PathVariable Long id) {\n        service.deleteEmployeeById(id);\n        return ResponseEntity.noContent().build();\n    }\n\n    @PutMapping\n    public Employee insert(@RequestBody Employee employee) {\n        return service.saveEmployee(employee);\n    }\n\n   \n}\n\n\n\n\n\n\n\n// Archivo: src/main/java/test/core/api/service/EmployeeService.java\n\npackage test.core.api.service;\n\nimport java.util.List;\n\nimport test.core.api.model.Employee;\n\npublic interface EmployeeService {\n\t\n\n\tList<Employee> getAllEmployees();\n\tvoid deleteEmployeeById(Long id);\n    Employee saveEmployee(Employee employee);\n\n\n\n\t\n}\n\n// Archivo: src/main/java/test/core/api/service/impl/EmployeeServiceImpl.java\n\npackage test.core.api.service.impl;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport test.core.api.model.Employee;\nimport test.core.api.repository.EmployeeRepository;\nimport test.core.api.service.EmployeeService;\n\n@Component\npublic class EmployeeServiceImpl implements EmployeeService {\n\t\n\t    @Autowired\n\t    private EmployeeRepository repository;\n\n\t    public List<Employee> getAllEmployees() {\n\t        return (List<Employee>) repository.findAll();\n\t    }\n\n\t    public void deleteEmployeeById(Long id) {\n\t        repository.deleteById(id);\n\t    }\n\n\t    public Employee saveEmployee(Employee employee) {\n\t        return repository.save(employee); \n\t    }\n}\n--- ANÁLISIS DE CLASES EXISTENTES ---\nGenera una tabla Markdown como esta:\n\n| Clase Java | Clasificación | Motivo |\n|------------|----------------|--------|\n| Employee | REUTILIZABLE-AS-IS | Contiene atributo `gender` |\n| EmployeeServiceImpl | MODIFICABLE | Debe validar antes de borrar |\n| NuevaClaseX | NUEVA | Requerida por funcionalidad nueva |\n\n--- INSTRUCCIONES DE MODIFICACIÓN ---\n- No eliminar ni reemplazar lógica existente.\n- Si se modifica un método, incluirlo completo con el nuevo código y lo que ya tenía.\n- Solo generar clases nuevas si están indicadas como NUEVA.\n- NO repetir clases ya existentes si no cambian.\n\n--- CÓDIGO A GENERAR ---\nDevuelve solo clases Java válidas. Cada bloque debe comenzar con `package ...`.\nTambién incluye tests JUnit5 si aplica.\n"
    }
  ],
  "temperature": 0.2
}
