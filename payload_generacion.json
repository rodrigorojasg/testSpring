{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un generador de código Java experto en Spring Boot. Solo devuelve clases y tests JUnit válidos. Cada bloque debe comenzar con \"package\". No incluyas texto adicional."
    },
    {
      "role": "user",
      "content": "--- HISTORIA DE USUARIO ---\nid: HDU-EMP-003\ntitulo: Prevenir eliminación de empleadas\nactor: Administrador del sistema\ndescripcion: >\n  Como administrador del sistema,\n  quiero que no se permita eliminar empleados de género femenino,\n  para cumplir con la  normativa interna de no eliminar registros históricos sensibles.\n\ncriterios_aceptacion:\n  - Si se intenta eliminar un empleado con género \"Femenino\", se debe lanzar una excepción o retornar un error controlado.\n  - Si el empleado es de género \"Masculino\" u otro valor, se permite la eliminación normal.\n  - El método de eliminación actual debe ser modificado para incluir esta validación.\n  - No debe eliminarse ninguna lógica existente que ya esté implementada en ese método.\n  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.\n  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.\n\n\n--- DIAGNÓSTICO Y PLAN DE CLASES ---\n--- ANÁLISIS DE CLASES EXISTENTES ---\n\n| Clase Java | Clasificación | Motivo |\n|------------|----------------|--------|\n| Employee | REUTILIZABLE-AS-IS | Contiene atributo `gender` que se necesita para la validación |\n| EmployeeRepository | REUTILIZABLE-AS-IS | Proporciona el método `deleteById` que se necesita para eliminar un empleado |\n| EmployeeService | MODIFICABLE | Necesita un nuevo método para validar el género antes de eliminar |\n| EmployeeServiceImpl | MODIFICABLE | Implementación del servicio donde se realizará la validación |\n| EmployeeController | MODIFICABLE | El método `delete` necesita manejar la nueva excepción |\n\n--- PLAN DE MODIFICACIÓN ---\n\n1. Clase `EmployeeService`: Agregar un nuevo método `validateAndDeleteEmployeeById(Long id)`. Este método primero buscará el empleado por id, verificará el género y si es válido, eliminará el empleado.\n\n2. Clase `EmployeeServiceImpl`: Implementar el nuevo método `validateAndDeleteEmployeeById(Long id)`. Este método primero buscará el empleado por id, verificará el género y si es válido, eliminará el empleado. Si el género es \"Femenino\", lanzará una excepción.\n\n3. Clase `EmployeeController`: Modificar el método `delete` para llamar al nuevo método `validateAndDeleteEmployeeById(Long id)` en lugar de `deleteEmployeeById(Long id)`. También se debe manejar la nueva excepción lanzada por `validateAndDeleteEmployeeById(Long id)`.\n\n4. Crear una nueva clase de excepción `GenderValidationException` que se lanzará cuando se intente eliminar un empleado de género femenino.\n\n5. Crear pruebas unitarias para el nuevo método `validateAndDeleteEmployeeById(Long id)` y la nueva excepción `GenderValidationException`.\n\n--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---\n- Modifica únicamente las clases marcadas como MODIFICABLE.\n- Crea nuevas clases solo si están indicadas como NUEVA.\n- No cambies de paquete ni nombre de clase.\n- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.\n- No omitas lógica existente.\n- Cada clase debe comenzar con `package ...`.\n- Devuelve únicamente clases y tests JUnit 5 válidos.\n- No incluyas explicaciones ni comentarios adicionales."
    }
  ],
  "temperature": 0.3
}
