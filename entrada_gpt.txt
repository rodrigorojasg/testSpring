nombre: Obtener empleados nacidos antes del año 2000
como: Administrador del sistema
quiero: Obtener una lista de empleados que hayan nacido antes del año 2000
para: Poder segmentar  a los empleados por generaciones y aplicar políticas diferenciadas
Clases detectadas en el repositorio base:
repositorio-base/src/main/java/test/core/api/model/Employee.java
repositorio-base/src/main/java/test/core/api/repository/EmployeeRepository.java
repositorio-base/src/main/java/test/core/api/EmployeeCoreApiApplication.java
repositorio-base/src/main/java/test/core/api/controller/EmployeeController.java
repositorio-base/src/main/java/test/core/api/service/EmployeeService.java
repositorio-base/src/main/java/test/core/api/service/impl/EmployeeServiceImpl.java

--- ANÁLISIS (Fase 1) ---
1. Qué clases pueden reutilizarse sin modificar.
2. Qué clases deben ser modificadas (añadir métodos, anotaciones, etc.).
3. Qué clases deben ser nuevas.

--- DISEÑO (Fase 2) ---
- Usa el contenido exacto de clases marcadas como modificables que aparece a continuación.
- No elimines nada del contenido original. Solo agrega lo que se indica en la historia de usuario.

--- CLASES COMPLETAS PARA MODIFICAR ---

// Inicio de clase original: repositorio-base/src/main/java/test/core/api/controller/EmployeeController.java

package test.core.api.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import test.core.api.model.Employee;
import test.core.api.service.EmployeeService;

@RestController
@RequestMapping("/api/employees")
public class EmployeeController {

    @Autowired
    private EmployeeService service;

    @GetMapping
    public List<Employee> getAll() {
        System.out.println("Fetching all employees");
        return service.getAllEmployees();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        service.deleteEmployeeById(id);
        return ResponseEntity.noContent().build();
    }

    @PutMapping
    public Employee insert(@RequestBody Employee employee) {
        return service.saveEmployee(employee);
    }

   
}






// Fin de clase original: repositorio-base/src/main/java/test/core/api/controller/EmployeeController.java


// Inicio de clase original: repositorio-base/src/main/java/test/core/api/service/impl/EmployeeServiceImpl.java

package test.core.api.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import test.core.api.model.Employee;
import test.core.api.repository.EmployeeRepository;
import test.core.api.service.EmployeeService;

@Component
public class EmployeeServiceImpl implements EmployeeService {
	
	    @Autowired
	    private EmployeeRepository repository;

	    public List<Employee> getAllEmployees() {
	        return (List<Employee>) repository.findAll();
	    }

	    public void deleteEmployeeById(Long id) {
	        repository.deleteById(id);
	    }

	    public Employee saveEmployee(Employee employee) {
	        return repository.save(employee); 
	    }
}
// Fin de clase original: repositorio-base/src/main/java/test/core/api/service/impl/EmployeeServiceImpl.java


--- GENERACIÓN (Fase 3) ---
- Genera únicamente las clases nuevas o modificadas.
- Usa exactamente el contenido original y agrega lo necesario.
- No omitas métodos ni reemplaces clases enteras.
- Cada clase comienza con 'package ...'. No incluyas explicaciones ni comentarios adicionales.
