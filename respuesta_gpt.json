{
  "id": "chatcmpl-BfWujMzXkM1jIUC5rnX0wVx8h3MQp",
  "object": "chat.completion",
  "created": 1749237669,
  "model": "gpt-4-0613",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "// Archivo: src/main/java/test/core/api/service/impl/EmployeeServiceImpl.java\n\npackage test.core.api.service.impl;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport test.core.api.model.Employee;\nimport test.core.api.repository.EmployeeRepository;\nimport test.core.api.service.EmployeeService;\n\n@Component\npublic class EmployeeServiceImpl implements EmployeeService {\n\t\n\t    @Autowired\n\t    private EmployeeRepository repository;\n\n\t    public List<Employee> getAllEmployees() {\n\t        return (List<Employee>) repository.findAll();\n\t    }\n\n\t    public void deleteEmployeeById(Long id) {\n\t        Employee employee = repository.findById(id).orElse(null);\n\t        if(employee != null) {\n\t            // Start of AI modification for HDU-EMP-003\n\t            if(\"Femenino\".equals(employee.getGender())) {\n\t                throw new IllegalArgumentException(\"Cannot delete female employee due to internal policy\");\n\t            }\n\t            // End of AI modification for HDU-EMP-003\n\t            repository.deleteById(id);\n\t        } else {\n\t            throw new IllegalArgumentException(\"Employee with id \" + id + \" does not exist\");\n\t        }\n\t    }\n\n\t    public Employee saveEmployee(Employee employee) {\n\t        return repository.save(employee); \n\t    }\n}\n\n\n// Archivo: src/test/java/test/core/api/service/EmployeeServiceTest.java\n\npackage test.core.api.service;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Optional;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport test.core.api.model.Employee;\nimport test.core.api.repository.EmployeeRepository;\nimport test.core.api.service.impl.EmployeeServiceImpl;\n\npublic class EmployeeServiceTest {\n\n    @InjectMocks\n    private EmployeeServiceImpl employeeService;\n\n    @Mock\n    private EmployeeRepository employeeRepository;\n\n    @Test\n    public void testDeleteFemaleEmployee() {\n        MockitoAnnotations.initMocks(this);\n        Employee employee = new Employee();\n        employee.setId(1L);\n        employee.setGender(\"Femenino\");\n        when(employeeRepository.findById(1L)).thenReturn(Optional.of(employee));\n        assertThrows(IllegalArgumentException.class, () -> employeeService.deleteEmployeeById(1L));\n    }\n\n    @Test\n    public void testDeleteNonExistingEmployee() {\n        MockitoAnnotations.initMocks(this);\n        when(employeeRepository.findById(1L)).thenReturn(Optional.empty());\n        assertThrows(IllegalArgumentException.class, () -> employeeService.deleteEmployeeById(1L));\n    }\n}",
        "refusal": null,
        "annotations": []
      },
      "logprobs": null,
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 1503,
    "completion_tokens": 496,
    "total_tokens": 1999,
    "prompt_tokens_details": {
      "cached_tokens": 0,
      "audio_tokens": 0
    },
    "completion_tokens_details": {
      "reasoning_tokens": 0,
      "audio_tokens": 0,
      "accepted_prediction_tokens": 0,
      "rejected_prediction_tokens": 0
    }
  },
  "service_tier": "default",
  "system_fingerprint": null
}
