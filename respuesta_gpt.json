{
  "id": "chatcmpl-BfSqaETWWt9N4LMRAboVcOihMdl98",
  "object": "chat.completion",
  "created": 1749222036,
  "model": "gpt-4-0613",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "package com.company.employee;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class EmployeeService {\n\n    @Autowired\n    private EmployeeRepository employeeRepository;\n\n    public void deleteEmployee(Long id) {\n        Employee employee = employeeRepository.findById(id)\n                .orElseThrow(() -> new ResourceNotFoundException(\"Employee\", \"id\", id));\n\n        // Start of AI modification\n        if (\"Femenino\".equals(employee.getGender())) {\n            throw new UnsupportedOperationException(\"No se permite eliminar empleados de gÃ©nero femenino\");\n        }\n        // End of AI modification\n\n        employeeRepository.delete(employee);\n    }\n}\n\npackage com.company.employee;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport static org.mockito.Mockito.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class EmployeeServiceTest {\n\n    @Mock\n    private EmployeeRepository employeeRepository;\n\n    @InjectMocks\n    private EmployeeService employeeService;\n\n    @Test\n    public void deleteEmployee_MaleEmployee_Success() {\n        Employee maleEmployee = new Employee();\n        maleEmployee.setId(1L);\n        maleEmployee.setGender(\"Masculino\");\n\n        when(employeeRepository.findById(1L)).thenReturn(java.util.Optional.of(maleEmployee));\n\n        employeeService.deleteEmployee(1L);\n\n        verify(employeeRepository, times(1)).delete(maleEmployee);\n    }\n\n    @Test\n    public void deleteEmployee_FemaleEmployee_ThrowsException() {\n        Employee femaleEmployee = new Employee();\n        femaleEmployee.setId(2L);\n        femaleEmployee.setGender(\"Femenino\");\n\n        when(employeeRepository.findById(2L)).thenReturn(java.util.Optional.of(femaleEmployee));\n\n        assertThrows(UnsupportedOperationException.class, () -> employeeService.deleteEmployee(2L));\n\n        verify(employeeRepository, never()).delete(femaleEmployee);\n    }\n}",
        "refusal": null,
        "annotations": []
      },
      "logprobs": null,
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 282,
    "completion_tokens": 390,
    "total_tokens": 672,
    "prompt_tokens_details": {
      "cached_tokens": 0,
      "audio_tokens": 0
    },
    "completion_tokens_details": {
      "reasoning_tokens": 0,
      "audio_tokens": 0,
      "accepted_prediction_tokens": 0,
      "rejected_prediction_tokens": 0
    }
  },
  "service_tier": "default",
  "system_fingerprint": null
}
